sd(ax)
length(ax)
sd(ay)
sum( (ay - mean(ay) )*(ax - mean(ax) ) )
median(ax)
mean(ax)
mean(ay)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
#library(ggmosaic)
# data :
head(cars)
str(cars)
# basic scatter plot ( two eauivalent ways):
plot(dist ~ speed , data = cars ,
main = 'Stopping Distance = a + b * Speed + e',
xlab = 'Speed', ylab='Distance')
# Fit an OLS regression model:
( lm.cars <- lm(dist ~ speed , data = cars) )
lm.cars.summary <-  summary ( lm.cars ) # Credible intervals of the parameters , Pearson's correlation factor , R^2
# Pearson's r , R^2
cor(cars$speed , cars$dist)^2
# s_e
n <- nrow(cars)
sqrt( sum( lm.cars$residuals^2 ) / (n-2) )
##### Hypothesis testing:
# H_0 : (beta_0 , beta_1) = ( 0 , 0)
lm.cars.summary # t-test results in summary table
beta_estimates <- ((lm.cars.summary)[[4]]) [,1]
beta_sds <-((lm.cars.summary)[[4]]) [,2]
beta_estimates/beta_sds  # the t-statistic
# What is your conclusion for H_1: beta_0 < 0
((lm.cars.summary)[[4]]) [1,4] / 2 # pvalue
c(-Inf , qt(p = .05 , df = n - 2)) # Rejection area
# What is your conclusion for H_1: beta_1 > 0
((lm.cars.summary)[[4]]) [2,4] / 2 # pvalue
c( qt(p = .95 , df = n - 2) , Inf ) # Rejection area
# H_0 : (beta_0 , beta_1) = ( b0 , b1)
b0 = 15 ; b1 = 1 # For instance
lm.cars.summary
beta_estimates <- ((lm.cars.summary)[[4]]) [,1]
beta_sds <-((lm.cars.summary)[[4]]) [,2]
t_statistic = ((beta_estimates - c(b0 , b1 ) ) / beta_sds)
# two-sided p-value:
2*( pt( q = abs(t_statistic) ,df = n-2 , lower.tail = F) )
# What is your conclusion for H_1: beta_0 < 15
c(-Inf , qt(p = .05 , df = n - 2)) # Rejection area
summary(cars$speed)
predict(object = lm.cars , newdata = data.frame( speed = 15 ) ,interval = 'prediction') # For existing samples
predict(object = lm.cars , newdata = data.frame( speed = 15 ) ,interval = 'confidence') # For 'future' samples - inappropriate
y
predict(object = lm.cars , newdata = data.frame( speed = 21 ) ,interval = 'confidence') # For 'future' samples
n
beta_0 <- beta_estimates[1] ; beta_1 <- beta_estimates[2]
y_25 <- beta_0 + 15*beta_1
predict(object = lm.cars , newdata = data.frame( speed = 15 ) ,interval = 'prediction') # For existing samples
(y_25 <- beta_0 + 15*beta_1  )
# prediction interval:
s_xx = var(cars$speed) * ( n-1 )
y_25 + c( -1 , 1 ) * s_e * sqrt( 1/n + (( 15 - mean( cars$speed ) )^2) / s_xx )
# data :
head(cars)
str(cars)
# basic scatter plot ( two eauivalent ways):
plot(dist ~ speed , data = cars ,
main = 'Stopping Distance = a + b * Speed + e',
xlab = 'Speed', ylab='Distance')
# Fit an OLS regression model:
( lm.cars <- lm(dist ~ speed , data = cars) )
lm.cars.summary <-  summary ( lm.cars ) # Credible intervals of the parameters , Pearson's correlation factor , R^2
# Pearson's r , R^2
cor(cars$speed , cars$dist)^2
# s_e
( n <- nrow(cars) )
( s_e <- sqrt( sum( lm.cars$residuals^2 ) / (n-2) ) )
##### Hypothesis testing:
# H_0 : (beta_0 , beta_1) = ( 0 , 0)
lm.cars.summary # t-test results in summary table
beta_estimates <- ((lm.cars.summary)[[4]]) [,1]
beta_sds <-((lm.cars.summary)[[4]]) [,2]
beta_estimates/beta_sds  # the t-statistic
# What is your conclusion for H_1: beta_0 < 0
((lm.cars.summary)[[4]]) [1,4] / 2 # pvalue
c(-Inf , qt(p = .05 , df = n - 2)) # Rejection area
# What is your conclusion for H_1: beta_1 > 0
((lm.cars.summary)[[4]]) [2,4] / 2 # pvalue
c( qt(p = .95 , df = n - 2) , Inf ) # Rejection area
# H_0 : (beta_0 , beta_1) = ( b0 , b1)
b0 = 15 ; b1 = 1 # For instance
lm.cars.summary
beta_estimates <- ((lm.cars.summary)[[4]]) [,1]
beta_0 <- beta_estimates[1] ; beta_1 <- beta_estimates[2]
beta_sds <-((lm.cars.summary)[[4]]) [,2]
t_statistic = ((beta_estimates - c(b0 , b1 ) ) / beta_sds)
# two-sided p-value:
2*( pt( q = abs(t_statistic) ,df = n-2 , lower.tail = F) )
# What is your conclusion for H_1: beta_0 < 15
c(-Inf , qt(p = .05 , df = n - 2)) # Rejection area
summary(cars$speed)
predict(object = lm.cars , newdata = data.frame( speed = 15 ) ,interval = 'prediction') # For existing samples
predict(object = lm.cars , newdata = data.frame( speed = 15 ) ,interval = 'confidence') # For 'future' samples - inappropriate
# prediction for meadian(x) , which is x = 15
(y_25 <- beta_0 + 15*beta_1  )
# prediction interval:
s_xx = var(cars$speed) * ( n-1 )
y_25 + c( -1 , 1 ) * s_e * sqrt( 1/n + (( 15 - mean( cars$speed ) )^2) / s_xx )
predict(object = lm.cars , newdata = data.frame( speed = 21 ) ,interval = 'confidence') # For 'future' samples
predict(object = lm.cars , newdata = data.frame( speed = 15 ) ,interval = 'prediction' , level = .95 ) # For existing samples
y_25 + c( -1 , 1 ) * qt(p = .975 ,df = 48 ) * s_e * sqrt( 1/n + (( 15 - mean( cars$speed ) )^2) / s_xx )
nrow(cars)
predict(object = lm.cars , newdata = data.frame( speed = 15 ) ,interval = 'prediction' , level = .95 ) # For existing samples
predict(object = lm.cars , newdata = data.frame( speed = 15 ) ,interval = 'confidence' , level = .95 ) # For 'future' samples - inappropriate
predict(object = lm.cars , newdata = data.frame( speed = 15 ) ,interval = 'confidence' , level = .95 ) # For 'future' samples
# predict for a sample with x_0 that does not exist in the sample: x_0 = 21
predict(object = lm.cars , newdata = data.frame( speed = 21 ) ,interval = 'confidence') # For 'future' samples
# predict for a sample with x_0 that does not exist in the sample: x_0 = 21
predict(object = lm.cars , newdata = data.frame( speed = 21 ) ,interval = 'prediction' ) # For 'future' samples
# pluging in the formulas:
(y_21 <- beta_0 + 21*beta_1  )
y_25 + c( -1 , 1 ) * qt(p = .975 ,df = 48 ) * s_e * sqrt( 1 + 1/50 + (( 21 - mean( cars$speed ) )^2) / s_xx )
# pluging in the formulas:
(y_21 <- beta_0 + 21*beta_1  )
y_1 + c( -1 , 1 ) * qt(p = .975 ,df = 48 ) * s_e * sqrt( 1 + 1/50 + (( 21 - mean( cars$speed ) )^2) / s_xx )
y_21 + c( -1 , 1 ) * qt(p = .975 ,df = 48 ) * s_e * sqrt( 1 + 1/50 + (( 21 - mean( cars$speed ) )^2) / s_xx )
# predict for a sample with x_0 that does not exist in the sample: x_0 = 21
predict(object = lm.cars , newdata = data.frame( speed = 21 ) ,interval = 'prediction' ) # For 'future' samples
# basic scatter plot ( two eauivalent ways):
plot(dist ~ speed , data = cars ,
main = 'Stopping Distance = a + b * Speed + e',
xlab = 'Speed', ylab='Distance')
abline(lm.cars)
( lm.cars <- lm(dist ~ speed , data = cars) )
# basic scatter plot ( two eauivalent ways):
plot(dist ~ speed , data = cars ,
main = 'Stopping Distance = a + b * Speed + e',
xlab = 'Speed', ylab='Distance')
abline(lm.cars)
plot( lm.cars$residuals ~ lm.cars$fitted.values )
abline( a = 0 , b = 0 , color = 'red')
plot( lm.cars$residuals ~ lm.cars$fitted.values )
abline( a = 0 , b = 0 , color = 'red')
abline( h = 0, color = 'red')
plot( lm.cars$residuals ~ lm.cars$fitted.values )
plot( lm.cars$residuals ~ lm.cars$fitted.values )
abline( h = 0, color = 'red')
abline( h = 0)
abline(v = 0)
abline(v = 0 , colour = 'red')
abline(v = 0 , col= 'red')
par( mfrow = c( 1,2 ) )
plot( lm.cars$residuals ~ lm.cars$fitted.values )
abline(h = 0 , col= 'red')
qqplot(lm.cars$residuals)
qqnorm(lm.cars$residuals)
qqnorm(lm.cars$residuals) ; qqline(lm.cars$residuals , col = 'red' )
MSE <- sum( lm.cars$residuals^2 ) / (n-2)
( s_e <- sqrt(  MSE ) )
# Pearson's r , R^2
cor(cars$speed , cars$dist)^2
1 - sum( lm.cars$residuals^2 ) / (var(cars$speed) * 48 )
sum( lm.cars$residuals^2 ) / (var(cars$speed) * 49 )
(var(cars$speed) * 49 )
1 - sum( lm.cars$residuals^2 ) / (var(cars$dist) * 49 )
(124+49+ 7*(25/7)^2).6
(124+49+ 7*(25/7)^2)/6
sqrt((124+49+ 7*(25/7)^2)/42)
pt(q = (25/7)/2.5 ,df = 6,lower.tail = F)*2
x <- c(-2,-2,-4,-10,-6,2,-3)
mean(x)
sd(x)
sd(x)^2
mean(x)*sqrt(7)/3.7
pt(q = 2.55 ,df = 6,lower.tail = F)
2*qt(p = .95,df = 6)*3.7/sqrt(7)
pnorm( 2.55*3.7/3 ,lower.tail = F)
pt(q =2.55*3.7/3,df = 6,lower.tail = F)
(36+16)/2
sqrt(26)
4.5/(5.1*sqrt(.2))
pt(q = 1.97,df = 20)
pt(q = 1.97,df = 20,lower.tail = F)
pt(q = 1.97,df = 15,lower.tail = F)
library(ggplot2)
df = data.frame(id1 = letters[1:10], C = abs(rnorm(10)))
#scatter plot
p1 <- ggplot(df, aes(x= id1, y = C)) +
geom_point(pch = 19) + theme_bw() +
# Change the expand values
scale_x_discrete(expand = c(0.05, 0.05), breaks = letters[1:10]) +
#scale_y_discrete(breaks = NULL) +
theme(legend.position = "none") + theme(axis.title.y = element_blank()) + theme(axis.title.x = element_blank())
p1
#data for the heatmap
X = data.frame(matrix(rnorm(100), nrow = 10))
names(X) = month.name[1:10]
X = melt(cbind(id1 = letters[1:10], X))
#heatmap
p2 <- ggplot(X,
aes(x = id1, y = variable, fill = value))
p2 <- p2 + geom_tile()
p2 <- p2 + scale_fill_gradientn(colours = c("blue", "white" , "red"))
p2 <- p2 + theme(legend.position = "none") + theme(axis.title.y = element_blank()) + theme(axis.title.x = element_blank())
p2 <- p2 + scale_x_discrete(expand = c(0, 0), breaks = letters[1:10])
library(gridExtra)
#heatmap
p2 <- ggplot(X,
aes(x = id1, y = variable, fill = value))
p2 <- p2 + geom_tile()
p2 <- p2 + scale_fill_gradientn(colours = c("blue", "white" , "red"))
p2 <- p2 + theme(legend.position = "none") + theme(axis.title.y = element_blank()) + theme(axis.title.x = element_blank())
p2 <- p2 + scale_x_discrete(expand = c(0, 0), breaks = letters[1:10])
p2 <- p2 + scale_y_discrete(expand = c(0, 0))
#Here's the gtable magic
gp1<- ggplot_gtable(ggplot_build(p1))
gp2<- ggplot_gtable(ggplot_build(p2))
#This identifies the maximum width
maxWidth = unit.pmax(gp1$widths[2:3], gp2$widths[2:3])
#Set each to the maximum width
gp1$widths[2:3] <- maxWidth
library(reshape2)
#scatter plot
p1 <- ggplot(df, aes(x= id1, y = C)) +
geom_point(pch = 19) + theme_bw() +
# Change the expand values
scale_x_discrete(expand = c(0.05, 0.05), breaks = letters[1:10]) +
#scale_y_discrete(breaks = NULL) +
theme(legend.position = "none") + theme(axis.title.y = element_blank()) + theme(axis.title.x = element_blank())
p1
#data for the heatmap
X = data.frame(matrix(rnorm(100), nrow = 10))
names(X) = month.name[1:10]
X = melt(cbind(id1 = letters[1:10], X))
df = data.frame(id1 = letters[1:10], C = abs(rnorm(10)))
#scatter plot
p1 <- ggplot(df, aes(x= id1, y = C)) +
geom_point(pch = 19) + theme_bw() +
# Change the expand values
scale_x_discrete(expand = c(0.05, 0.05), breaks = letters[1:10]) +
#scale_y_discrete(breaks = NULL) +
theme(legend.position = "none") + theme(axis.title.y = element_blank()) + theme(axis.title.x = element_blank())
p1
#data for the heatmap
X = data.frame(matrix(rnorm(100), nrow = 10))
names(X) = month.name[1:10]
X = melt(cbind(id1 = letters[1:10], X))
#heatmap
p2 <- ggplot(X,
aes(x = id1, y = variable, fill = value))
p2 <- p2 + geom_tile()
p2 <- p2 + scale_fill_gradientn(colours = c("blue", "white" , "red"))
p2 <- p2 + theme(legend.position = "none") + theme(axis.title.y = element_blank()) + theme(axis.title.x = element_blank())
p2 <- p2 + scale_x_discrete(expand = c(0, 0), breaks = letters[1:10])
p2 <- p2 + scale_y_discrete(expand = c(0, 0))
#Here's the gtable magic
gp1<- ggplot_gtable(ggplot_build(p1))
gp2<- ggplot_gtable(ggplot_build(p2))
#This identifies the maximum width
maxWidth = unit.pmax(gp1$widths[2:3], gp2$widths[2:3])
#Set each to the maximum width
gp1$widths[2:3] <- maxWidth
gp2$widths[2:3] <- maxWidth
#Put them together
grid.arrange(gp1, gp2)
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6]) %>%
filter(S1 != S2)
library(dplyr)
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6]) %>%
filter(S1 != S2)
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c(T,F) , FDR.applied = c(T,F)) %>%
filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T))
View(test.geno.data)
# remove couples ( as missing comparison)
remove.strains <- (test.geno.data$S1 == 'A')&(test.geno.data$S1 == 'C')
VIEW(test.geno.data)
View(test.geno.data)
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied')) %>%
filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T))
# remove couples ( as missing comparison)
remove.combs <- (test.geno.data$S1 == 'A')&(test.geno.data$S1 == 'C')
test.geno.data$significant[ remove.combs ] <- NA
View(test.geno.data)
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied')) %>%
filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T)) %>%
mutate( GxL.aaplied = replace(GxL.aaplied , !significant , 'Not sig') ,
FDR.aaplied = replace(FDR.aaplied , !significant , 'Not sig'))
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied')) %>%
filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T)) %>%
mutate( GxL.aaplied = replace(GxL.aaplied , !significant , 'Not sig') ,
FDR.aaplied = replace(FDR.aaplied , !significant , 'Not sig'))
expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied')) %>%
filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T))
replace(test.geno.data$GxL.aaplied , !test.geno.data$significant , 'Not_sig')
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied')) %>%
filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T))
str(test.geno.data)
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied')) %>%
filter(S1 != S2) %>%
mutate(significant = sample(x = c(0,1) , size = nrow(.) , replace = T))
str(test.geno.data)
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied')) %>%
filter(S1 != S2)
str(test.geno.data)
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied'))
str(test.geno.data)
LETTERS[1:6]
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied'),
stringsAsFactors = F) %>% filter(S1 != S2) %>%
mutate(significant = sample(x = c(0,1) , size = nrow(.) , replace = T))
str(test.geno.data)
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied'),
stringsAsFactors = F) %>% filter(S1 != S2) %>%
mutate(significant = sample(x = c(F,T) , size = nrow(.) , replace = T))
str(test.geno.data)
test.geno.data$GxL.aaplied <- as.character(test.geno.data$GxL.aaplied) %>%
replace( . , !significant , 'Not_sig')
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied')) %>%
filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T)) %>%
mutate( GxL.aaplied = replace(GxL.aaplied , !significant , 'Not sig') ,
FDR.aaplied = replace(FDR.aaplied , !significant , 'Not sig'))
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDRL_applied','not_applied') ,
stringsAsFactors = F) %>% filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T)) %>%
mutate( GxL.aaplied = replace(GxL.aaplied , !significant , 'Not sig') ,
FDR.aaplied = replace(FDR.aaplied , !significant , 'Not sig'))
test.geno.data$FDR.applied[(test.geno.data$FDR.applied == 'FDRL_applied' )] = 17
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDR_applied','not_applied') ,
stringsAsFactors = F) %>% filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T)) %>%
mutate( GxL.aaplied = replace(GxL.aaplied , !significant , 'Not sig') ,
FDR.aaplied = replace(FDR.aaplied , !significant , 'Not sig'))
test.geno.data$FDR.applied[(test.geno.data$FDR.applied == 'FDRL_applied' )] = 17
test.geno.data$FDR.applied[(test.geno.data$FDR.applied == 'not_applied' )] = 2
# remove couples ( as missing comparison)
remove.combs <- (test.geno.data$S1 == 'A')&(test.geno.data$S1 == 'C')
test.geno.data$significant[ remove.combs ] <- NA
ggplot(dataf, aes(y = factor(test.geno.data$S1),
x = factor(test.geno.data$S1))) +        ## global aes
geom_tile(aes(fill =  GxL.aaplied)) +         ## to get the rect filled
geom_point( aes( shape = FDR.applied ))  +    ## geom_point for circle illusion
scale_color_gradient(low = "yellow",
high = "red")+       ## color of the corresponding aes
scale_size(range = c(1, 20))+             ## to tune the size of circles
theme_bw()
ggplot(test.geno.data, aes(y = factor(test.geno.data$S1),
x = factor(test.geno.data$S1))) +        ## global aes
geom_tile(aes(fill =  GxL.aaplied)) +         ## to get the rect filled
geom_point( aes( shape = FDR.applied ))  +    ## geom_point for circle illusion
scale_color_gradient(low = "yellow",
high = "red")+       ## color of the corresponding aes
scale_size(range = c(1, 20))+             ## to tune the size of circles
theme_bw()
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDR_applied','not_applied') ,
stringsAsFactors = F) %>% #filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T)) %>%
mutate( GxL.aaplied = replace(GxL.aaplied , !significant , 'Not sig') ,
FDR.aaplied = replace(FDR.aaplied , !significant , 'Not sig'))
test.geno.data$GxL.aaplied[ test.geno.data$S1 ==test.geno.data$S2 ] = 'missing comb'
test.geno.data$FDR.applied[ test.geno.data$S1 ==test.geno.data$S2 ] = 'missing comb'
test.geno.data$FDR.applied[(test.geno.data$FDR.applied == 'FDRL_applied' )] = 17
test.geno.data$FDR.applied[(test.geno.data$FDR.applied == 'not_applied' )] = 2
test.geno.data$FDR.applied[(test.geno.data$FDR.applied %in% c( 'Not sig' , 'missing comb' ) )] = 32
# remove couples ( as missing comparison)
remove.combs <- (test.geno.data$S1 == 'A')&(test.geno.data$S1 == 'C')
test.geno.data$significant[ remove.combs ] <- NA
View(test.geno.data)
ggplot(test.geno.data, aes(y = factor(test.geno.data$S1),
x = factor(test.geno.data$S1))) +        ## global aes
geom_tile(aes(fill =  GxL.aaplied)) +         ## to get the rect filled
geom_point( aes( shape = FDR.applied ))  +    ## geom_point for circle illusion
scale_size(range = c(1, 20))+             ## to tune the size of circles
theme_bw()
summary(test.geno.data)
table(test.geno.data)
table(test.geno.data[1:3])
table(test.geno.data[,1:3])
table(test.geno.data[,c(1:2,4)])
ggplot(test.geno.data, aes(y = factor(test.geno.data$S1),
x = factor(test.geno.data$S1))) +        ## global aes
geom_tile(aes(fill =  as.factor(GxL.aaplied))) +         ## to get the rect filled
geom_point( aes( shape = FDR.applied ))  +    ## geom_point for circle illusion
scale_color_gradient(  )+       ## color of the corresponding aes
theme_bw()
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c('GxL_applied','not_applied'),
FDR.applied = c('FDR_applied','not_applied') ,
stringsAsFactors = F) %>% #filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T) ,
Color = NA , Shape = NA )
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c( T , F ),
FDR.applied = c( T , F ) ,
stringsAsFactors = F) %>% #filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T))
plotiing.data <- expand.grid(S1 = unique(test.geno.data$S2) , S2 = unique(test.geno.data$S2) ) %>%
mutate(Color = NA , Shape = NA )
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c( T , F ),
FDR.applied = c( T , F ) ,
stringsAsFactors = F) %>% #filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T))
test.geno.data %>% group_by( S1 , S2 ) %>%
summarise( color =  significant*sum(FDR.applied) )
test.geno.data %>% group_by( S1 , S2 ) %>%
summarise( coloring =  significant*sum(FDR.applied) )
test.geno.data <- expand.grid(S1 = LETTERS[1:6] , S2 = LETTERS[1:6] ,
GxL.aaplied = c( T , F ),
FDR.applied = c( T , F ) ,
stringsAsFactors = F) %>% #filter(S1 != S2) %>%
mutate(significant = sample(x = c(T,F) , size = nrow(.) , replace = T))
test.geno.data %>% group_by( S1 , S2 ) %>%
summarise( coloring =  sum(FDR.applied) )
test.geno.data %>% group_by( S1 , S2 ) %>%
summarise( coloring =  sum(significant*(FDR.applied + !FDR.applied)),
shape = sum( significant*(1*GxL.aaplied + 2*(!GxL.aaplied))) )
plotiing.data <- test.geno.data %>% group_by( S1 , S2 ) %>%
summarise( coloring =  sum(significant*(FDR.applied + !FDR.applied)),
shape = sum( significant*(1*GxL.aaplied + 2*(!GxL.aaplied))) )
View(plotiing.data)
table(plotiing.data$shape)
table(plotiing.data$coloring)
library(dplyr)
library(ggplot2)
library(XLConnect)
library(reshape2)
setwd(dir = '~/Iman/Dropbox/A cross laboratory investigation of timing endophenotypes in mouse behavior/MPD pairs/GxL app output/Pairwise Comparisons')
setwd(dir = '~/Dropbox/A cross laboratory investigation of timing endophenotypes in mouse behavior/MPD pairs/GxL app output/Pairwise Comparisons')
setwd(dir = '~/Dropbox/A cross laboratory investigation of timing endophenotypes in mouse behavior/MPD pairs/GxL app output/Pairwise Comparisons')
setwd(dir = '~/Dropbox/A cross laboratory investigation of timing endophenotypes in mouse behavior/MPD pairs/GxL app output/Pairwise Comparisons')
setwd(dir = '~/Dropbox/A cross laboratory investigation of timing endophenotypes in mouse behavior/MPD pairs/GxL app output/Pairwise Comparisons')
setwd(dir = '~/Dropbox/A cross laboratory investigation of timing endophenotypes in mouse behavior/MPD pairs/GxL app output/Pairwise Comparisons')
files.list <- list.files()
tables_names <- strsplit(files.list , split = 'FDR ')
tables_names <- unlist(lapply( tables_names , function(x) {x[2]})) %>%
gsub(pattern = ' ' ,replacement = '_',x = . ) %>%
strsplit( . , split = '.xlsx') %>% unlist(.)
measures <- unique(tables_names)
tables_names <- paste( tables_names , 1:length(tables_names ) ,sep = '_')
for ( i in 1:length(files.list)){
with.FDR <- !all( c('No','FDR') %in% unlist(strsplit( files.list[i] ,split = ' ')))
read.sheet <- 'readWorksheetFromFile(file = files.list[i] , sheet = 1,header = T)'
eval(parse ( text = paste ( tables_names[i] ,'<-' , read.sheet )))
col.naming <- paste('colnames(',  tables_names[i] ,') <- as.character(', tables_names[i],'[1,])' )
eval(parse ( text = col.naming ))
col.naming <- paste('colnames(',  tables_names[i] , ')[c(3,6)] <- c( "T" , "F")')
eval(parse ( text = col.naming ))
eval(parse ( text = paste ( tables_names[i] ,'<-' , tables_names[i] ,'[-1,c(1:3,6)]' )))
fdr.ind.col <- paste0( tables_names[i] ,' <- ', tables_names[i],
' %>% mutate( FDR =',with.FDR,')')
eval(parse ( text = fdr.ind.col ))
melting = paste0 ( tables_names[i], '<- melt(data =  ',tables_names[i],
',variable.name = "GxL" , id.vars = c("Comparison","Difference","FDR"),
measure.vars = c("T","F") , value.name = "pvalue"  ) %>%
mutate( measure = measures[i] , GxL = as.logical(GxL) )' )
eval(parse ( text = melting ))
strain.names <- paste0( 'strains <- strsplit(', tables_names[i] ,'$Comparison , split = " - ")')
eval(parse ( text = strain.names ))
strains <- t(unname(as.data.frame.list(strains)))
colnames(strains) <- c('strain1' , 'strain2')
strain.names <- paste0( tables_names[i] , ' <- cbind(  strains ,', tables_names[i] ,' )')
eval(parse ( text = strain.names ))
eval(parse ( text =
paste0( tables_names[i] , ' <-' , tables_names[i] ,
'[, c("measure" , "strain1","strain2","Comparison","FDR","GxL","Difference","pvalue")]')
))
}
install.packages('XLConnect')
library(XLConnect)
install.packages('XLConnectJars’)
install.packages('XLConnectJars’)'
install.packages('XLConnectJars')
library(XLConnectJars)
install.packages('XLConnect')
library(XLConnect)
install.packages('rJava', type='source')
library(XLConnect)
install.packages('XLConnect')
